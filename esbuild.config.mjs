import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import path from "path";
import fs from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const renameCSSFile = {
	name: 'rename-css',
	setup(build) {
		build.onEnd((err, res) => {
			const oldPath = path.join('D:\\programming\\projects\\Obsidian plugins\\Reference-Nexus\\src\\styles.css');
			const newPath = path.join('D:\\STORAGE\\Vaults\\workflow-test\\.obsidian\\plugins\\reference-nexus', 'styles.css');

			fs.copyFileSync(oldPath, newPath, 0);
		})
	}
}


const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/index.ts"],
	bundle: true,
	sourceRoot: "src",
	external: [
		"node:*",
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	platform: "node",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	define: {
		'process.env.NODE_ENV': JSON.stringify('production'), // or 'development'
	},
	loader: {'.css': 'css', '.scss': 'css'},
	plugins: [renameCSSFile],
	outfile: "D:/STORAGE/Vaults/workflow-test/.obsidian/plugins/reference-nexus/main.js"
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
